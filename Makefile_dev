.PHONY: setup_grpc compose_up test_auth

AUTH_DIR := ./services/auth/
GATEWAY_DIR := ./gateway/
FLUTTER_DIR := ../erp_app/
FLUTTER_ASSETS := assets/
TEST_DIR := ./shared/test/

CERT_DIR := certs/
CERT_KEY := $(CERT_DIR)server.key
CERT_CRT_GW := $(CERT_DIR)server_gw.crt
CERT_CRT_MS := $(CERT_DIR)server_ms.crt

PROTO_SRC_DIR_AUTH := $(AUTH_DIR)proto/
PROTO_SRC_DIR_GATEWAY := $(GATEWAY_DIR)proto/
PROTO_FLUTTER_OUT_DIR := $(FLUTTER_DIR)lib/proto/

# Command to generate Go and gRPC code
setup_grpc_auth:
	@protoc \
		--proto_path=$(PROTO_SRC_DIR_AUTH) \
		--go_out=$(PROTO_SRC_DIR_AUTH) \
		--go-grpc_out=$(PROTO_SRC_DIR_AUTH) \
		$(PROTO_SRC_DIR_AUTH)auth.proto
	@mkdir -p $(PROTO_FLUTTER_OUT_DIR)auth
	@protoc \
		--proto_path=$(PROTO_SRC_DIR_AUTH) \
		--dart_out=grpc:$(PROTO_FLUTTER_OUT_DIR)auth \
		$(PROTO_SRC_DIR_AUTH)auth.proto

compose_up:
	@if ! docker ps | grep -q "auth"; then \
		echo "Containers not running, starting them..."; \
		docker compose up -d; \
	else \
		echo "Containers are already running."; \
	fi

compose_down:
	@docker compose down

# Target to create the certificates
generate_cert_gw:
	@if [ -f $(GATEWAY_DIR)$(CERT_CRT_GW) ]; then \
		echo "Certificate already exists at $(GATEWAY_DIR)$(CERT_CRT_GW). Skipping generation."; \
	else \
		mkdir -p $(GATEWAY_DIR)$(CERT_DIR); \
		echo "Generating self-signed TLS certificate..."; \
		openssl req -new -newkey rsa:2048 -nodes -keyout $(GATEWAY_DIR)$(CERT_KEY) -out $(GATEWAY_DIR)$(CERT_DIR)/server.csr -subj "/CN=localhost"; \
		echo "subjectAltName=DNS:localhost,IP:127.0.0.1" > $(GATEWAY_DIR)$(CERT_DIR)san.ext; \
		openssl x509 -req -in $(GATEWAY_DIR)$(CERT_DIR)server.csr -signkey $(GATEWAY_DIR)$(CERT_KEY) -out $(GATEWAY_DIR)$(CERT_CRT_GW) -days 365 \
			-extfile $(GATEWAY_DIR)$(CERT_DIR)san.ext; \
		rm $(GATEWAY_DIR)$(CERT_DIR)san.ext; \
		echo "Certificate and key generated at $(GATEWAY_DIR)$(CERT_DIR)"; \
		mkdir -p $(FLUTTER_DIR)$(FLUTTER_ASSETS)$(CERT_DIR); \
		cp $(GATEWAY_DIR)$(CERT_CRT_GW) $(FLUTTER_DIR)$(FLUTTER_ASSETS)$(CERT_CRT_GW); \
		echo "Certificate copied to $(FLUTTER_DIR)$(FLUTTER_ASSETS)$(CERT_CRT_GW)"; \
		mkdir -p $(TEST_DIR)$(CERT_DIR); \
		cp $(GATEWAY_DIR)$(CERT_CRT_GW) $(TEST_DIR)$(CERT_CRT_GW); \
		echo "Certificate copied to $(TEST_DIR)$(CERT_CRT_GW)"; \
	fi

generate_cert_ms:
		@if [ -f $(AUTH_DIR)$(CERT_CRT_MS) ]; then \
		echo "Certificate already exists at $(AUTH_DIR)$(CERT_CRT_MS). Skipping generation."; \
	else \
		mkdir -p $(AUTH_DIR)$(CERT_DIR); \
		echo "Generating self-signed TLS certificate..."; \
		openssl req -new -newkey rsa:2048 -nodes -keyout $(AUTH_DIR)$(CERT_KEY) -out $(AUTH_DIR)$(CERT_DIR)/server.csr -subj "/CN=ms"; \
		echo "subjectAltName=DNS:ms, DNS:auth" > $(AUTH_DIR)$(CERT_DIR)san.ext; \
		openssl x509 -req -in $(AUTH_DIR)$(CERT_DIR)server.csr -signkey $(AUTH_DIR)$(CERT_KEY) -out $(AUTH_DIR)$(CERT_CRT_MS) -days 365 \
			-extfile $(AUTH_DIR)$(CERT_DIR)san.ext; \
		rm $(AUTH_DIR)$(CERT_DIR)san.ext; \
		echo "Certificate and key generated at $(AUTH_DIR)$(CERT_DIR)"; \
		mkdir -p $(GATEWAY_DIR)$(CERT_DIR); \
		cp $(AUTH_DIR)$(CERT_CRT_MS) $(GATEWAY_DIR)$(CERT_CRT_MS); \
		echo "Certificate copied to $(GATEWAY_DIR)$(CERT_CRT_MS)"; \
	fi

# Target to check health of the gRPC server
check_health_gw: generate_cert_ms generate_cert_gw compose_up
	@until grpcurl -v -cacert $(GATEWAY_DIR)$(CERT_CRT_GW) -d '' localhost:50052 list > /dev/null 2>&1; do \
		echo "Waiting for gRPC server..."; \
		sleep 2; \
	done
	@echo "gRPC server is ready."

test_auth: check_health_gw
	cd shared && go test ./test/... -v